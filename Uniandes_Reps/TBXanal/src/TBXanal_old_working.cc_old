// -*- C++ -*-
//
// Package:    TBXanal
// Class:      TBXanal
// 
/**\class TBXanal TBXanal.cc UserCode/TBXanal/src/TBXanal.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Alberto Andres Ocampo Rios
//         Created:  Fri Feb 13 13:22:19 CET 2009
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Run.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/InputTag.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"


////Data Format

#include "DataFormats/RPCDigi/interface/RPCDigi.h"
#include "DataFormats/RPCDigi/interface/RPCDigiCollection.h"
#include "DataFormats/MuonDetId/interface/RPCDetId.h"
#include "DataFormats/RPCRecHit/interface/RPCRecHitCollection.h"


///Geometry
#include "FWCore/Framework/interface/ESHandle.h"
#include "Geometry/RPCGeometry/interface/RPCGeometry.h"
#include "Geometry/Records/interface/MuonGeometryRecord.h"
#include "Geometry/CommonDetUnit/interface/GeomDet.h"
#include "Geometry/RPCGeometry/interface/RPCGeomServ.h"
#include "Geometry/CommonTopologies/interface/RectangularStripTopology.h"


/////Trigger
#include "DataFormats/L1Trigger/interface/L1MuonParticle.h"
#include "DataFormats/L1Trigger/interface/L1MuonParticleFwd.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuRegionalCand.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuGMTReadoutCollection.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctEtSums.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctCollections.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctJetCounts.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerEvmReadoutRecord.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMapRecord.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMap.h"

#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuGMTCand.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuGMTExtendedCand.h"
#include "CondFormats/L1TObjects/interface/L1GtParameters.h"
#include "CondFormats/DataRecord/interface/L1GtParametersRcd.h"



//root sweet root
#include <TROOT.h>
#include "TPaletteAxis.h"
#include "TTimeStamp.h"
#include "TTree.h"
#include "TFile.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TString.h"
#include "TFolder.h"

//string
#include <string>

#include "DataFormats/Provenance/interface/Timestamp.h"
#include <sys/time.h>

//
// class decleration
//

class TBXanal : public edm::EDAnalyzer {
public:
  explicit TBXanal(const edm::ParameterSet&);
  ~TBXanal();
  
private:
  virtual void beginJob(const edm::EventSetup&) ;
  void beginRun(const edm::Run&, const edm::EventSetup&);
  virtual void analyze(const edm::Event&, const edm::EventSetup&);
  virtual void endJob() ;
  
  TFile *hfile;
  TH1F *h1;
  TH1D *h2;
  TH1F *h3;
  TH1F *h5;
  TH1D *h4;
  TH1D *h6;
  TH1D *h7;
  TH1D *h8;
  TH1D *h9;
  TH1D *h10;
  TH1D *h11;
  TH1D *h12;
  TH1D *h13;
  TH1D *h15;
  TH1D *h14;
  TH1D *h16;
  TH1D *h17;
  TH1D *h18;
  TH1D *h19;
  TH1D *h20;
  TH1D *h21;
  TH1D *h22;
  TH2D *h23;

  int nbinsbx;
  int preveven;
  int prevevendt;
  int prevevencsc;
  std::string root_file_name;
  unsigned int bsec;
  unsigned int esec; 
  int prevbx;
  int prevbxdt;
  int prevbxcsc;
  unsigned long long orbrpc;
  unsigned long long orbdt;
  unsigned long long orbcsc;

  edm::InputTag m_GMTInputTag;




      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//

void TBXanal::beginRun(const edm::Run& r, const edm::EventSetup& eventSetup){
  edm::Timestamp btime = r.beginTime();
  edm::Timestamp etime = r.endTime();

  bsec = btime.value() >> 32;
  unsigned int busec = 0xFFFFFFFF & btime.value() ;

  esec = etime.value() >> 32;
  unsigned int eusec = 0xFFFFFFFF & etime.value() ;

  //  std::cout << "Begin time : " << busec << std::endl;
  //  std::cout << "End time : " << eusec << std::endl;

}


TBXanal::TBXanal(const edm::ParameterSet& iConfig)

{
  
  root_file_name = iConfig.getUntrackedParameter<std::string>("histoName");
  m_GMTInputTag = iConfig.getParameter<edm::InputTag>("GMTInputTag");
 //now do what ever initialization is needed
  nbinsbx = iConfig.getUntrackedParameter<int>("numbins");
}


TBXanal::~TBXanal()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to for each event  ------------
void
TBXanal::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
   using namespace std;


   int bx = iEvent.bunchCrossing();
   int thisOrbit = iEvent.orbitNumber();
   double orbitTime = 0.03564*(double)thisOrbit +(double)((double)bx/100000.0);
   double tempo = (orbitTime/10000)*25;

   /*   std::cout << "BX: " << bx << endl;
   cout << "Orbit Number : " << thisOrbit << endl;
   cout << "Orbit Time : " << (orbitTime/10000)*25 << endl;*/

   /*TimeValue_t time=iEvent.time().value(); 
   timeval *tmval=(timeval*)&time;
   neven = iEvent.id().event();
   nrun = iEvent.id().run();
   tempo = tmval->tv_usec;
   lumisection=iEvent.luminosityBlock();
   */

  
   //----------------------------- GLOBAL MUON TRIGGER ----------------------------------------

   edm::Handle<L1MuGMTReadoutCollection> gmtrc_handle; 
   iEvent.getByLabel(m_GMTInputTag,gmtrc_handle);
   L1MuGMTReadoutCollection const* gmtrc = gmtrc_handle.product();
  
   std::vector<L1MuGMTReadoutRecord> gmt_records = gmtrc->getRecords();
   std::vector<L1MuGMTReadoutRecord>::const_iterator igmtrr;
  
   for(igmtrr=gmt_records.begin(); igmtrr!=gmt_records.end(); igmtrr++) {
    
     std::vector<L1MuRegionalCand>::const_iterator iter1;
     std::vector<L1MuRegionalCand> rmc;

     rmc = igmtrr->getDTBXCands();
     for(iter1=rmc.begin(); iter1!=rmc.end(); iter1++) {
       if ( !(*iter1).empty()) {
         h3->Fill(tempo);
         if (prevbxdt == -1){
           prevbxdt = bx;
	   orbdt = iEvent.orbitNumber();
	   prevevendt = iEvent.id().event();
         }
         else {
	   if(fabs(iEvent.id().event()-prevevendt) == 1){
	     /*
	     std::cout << "Numerote : " << 3564*(iEvent.orbitNumber()-orbdt)+bx-prevbxdt << std::endl;
	     std::cout << "orbitnumber: " << iEvent.orbitNumber() << std::endl;
	     std::cout << "orbdt: " << orbdt << std::endl;
	     std::cout << "diffe: " << iEvent.orbitNumber()-orbdt << std::endl;
	     std::cout << "multiplied: " << 3564*(iEvent.orbitNumber()-orbdt) << std::endl;
	     std::cout << "bx: " << bx << std::endl;
	     std::cout << "prevbxdt: " << prevbxdt << std::endl;
	     std::cout << "difbx: " << bx-prevbxdt << std::endl;
	     */
	     h4->Fill(3564*(iEvent.orbitNumber()-orbdt)+bx-prevbxdt);
	   }
           prevbxdt =bx;
	   prevevendt = iEvent.id().event();
	   orbdt = iEvent.orbitNumber();
         }

       }
     }
     
     // CSC muon candidates
     rmc = igmtrr->getCSCCands();
     for(iter1=rmc.begin(); iter1!=rmc.end(); iter1++) {
       if ( !(*iter1).empty() ) {
         h5->Fill(tempo);
         if (prevbxcsc == -1){
           prevbxcsc = bx;
	   orbcsc = iEvent.orbitNumber();
	   prevevencsc = iEvent.id().event();
         }
         else {
	   if(fabs(iEvent.id().event()-prevevencsc) == 1){
	     //	     std::cout << "CSC BX" << std::endl;
	     h6->Fill(3564*(iEvent.orbitNumber()-orbcsc)+bx-prevbxcsc);
	     //h6->Fill(fabs(bx-prevbxcsc));
	   }
           prevbxcsc =bx;
	   prevevencsc = iEvent.id().event();
	   orbcsc = iEvent.orbitNumber();
         }
       }
     }
     
     
     rmc = igmtrr->getBrlRPCCands();
     for(iter1=rmc.begin(); iter1!=rmc.end(); iter1++) {
       if ( !(*iter1).empty() ) {
	 h1->Fill(tempo);
	 if (prevbx == -1){
	   prevbx = bx;
           orbrpc = iEvent.orbitNumber();
           preveven = iEvent.id().event();

	 }
	 else {
	   double dif;
	   if(fabs(iEvent.id().event()-preveven) == 1){
	     dif=3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx;
	     h2->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     h9->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     if((*iter1).bx()==-5)
	       h10->Fill(dif);
	     if((*iter1).bx()==-4)
	       h11->Fill(dif);
	     if((*iter1).bx()==-3)
	       h12->Fill(dif);
	     if((*iter1).bx()==-2)
	       h13->Fill(dif);
	     if((*iter1).bx()==-1)
	       h14->Fill(dif);
	     if((*iter1).bx()==0)
	       h15->Fill(dif);
	     if((*iter1).bx()==1)
	       h16->Fill(dif);
	     if((*iter1).bx()==2)
	       h17->Fill(dif);
	     if((*iter1).bx()==3)
	       h18->Fill(dif);
	     if((*iter1).bx()==4)
	       h19->Fill(dif);
	     if((*iter1).bx()==5)
	       h20->Fill(dif);

	     if((tempo >= 3517.6 and tempo <=3517.8 ) or (tempo >= 6210 and tempo <=6224 ) or (tempo >= 6134.7 and tempo <=6134.9 ) or  (tempo >= 6406 and tempo <=6420 ) or (tempo >= 6605 and tempo <=6606 )){ 
	       h7->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	       std::cout << "Event id: " << iEvent.id().event() << std::endl;
	       h21->Fill((*iter1).phiValue());
	       h22->Fill((*iter1).etaValue());
	       h23->Fill((*iter1).phiValue(),(*iter1).etaValue());
	       std::cout << "Phi: " << (*iter1).phiValue() << " Eta: " << (*iter1).etaValue();
	       std::cout << " ptValue: " << (*iter1).ptValue() << " charge: " << (*iter1).chargeValue();
	       std::cout << " quality: " << (*iter1).quality() << " bx: " << (*iter1).bx();
	       std::cout << " time: " << tempo << std::endl;
	     }
	     else{
	       h8->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     }
	     //h2->Fill(fabs(bx-prevbx)); 
	   }
	   prevbx =bx;
	   preveven = iEvent.id().event();
           orbrpc = iEvent.orbitNumber();

	 }
       }
     }
     
     rmc = igmtrr->getFwdRPCCands();
     for(iter1=rmc.begin(); iter1!=rmc.end(); iter1++) {
       if ( !(*iter1).empty() ) {
	 // irpcf++;
	 h1->Fill(tempo);
	 if (prevbx == -1){
	   prevbx = bx;
           orbrpc = iEvent.orbitNumber();
           preveven = iEvent.id().event();

	 }
	 else {
	   double dif;
	   if(fabs(iEvent.id().event()-preveven) == 1){
	     dif=3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx;
	     h2->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     h9->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     if((*iter1).bx()==-5)
	       h10->Fill(dif);
	     if((*iter1).bx()==-4)
	       h11->Fill(dif);
	     if((*iter1).bx()==-3)
	       h12->Fill(dif);
	     if((*iter1).bx()==-2)
	       h13->Fill(dif);
	     if((*iter1).bx()==-1)
	       h14->Fill(dif);
	     if((*iter1).bx()==0)
	       h15->Fill(dif);
	     if((*iter1).bx()==1)
	       h16->Fill(dif);
	     if((*iter1).bx()==2)
	       h17->Fill(dif);
	     if((*iter1).bx()==3)
	       h18->Fill(dif);
	     if((*iter1).bx()==4)
	       h19->Fill(dif);
	     if((*iter1).bx()==5)
	       h20->Fill(dif);
	     if((tempo >= 3517.6 and tempo <=3517.8 ) or (tempo >= 6210 and tempo <=6224 ) or (tempo >= 6134.7 and tempo <=6134.9 ) or  (tempo >= 6406 and tempo <=6420 ) or (tempo >= 6605 and tempo <=6606 )){ 
	       h7->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	       h21->Fill((*iter1).phiValue());
	       h22->Fill((*iter1).etaValue());
	       h23->Fill((*iter1).phiValue(),(*iter1).etaValue());
	       std::cout << "Phi: " << (*iter1).phiValue() << " Eta: " << (*iter1).etaValue();
	       std::cout << " ptValue: " << (*iter1).ptValue() << " charge: " << (*iter1).chargeValue();
	       std::cout << " quality: " << (*iter1).quality() << " bx: " << (*iter1).bx();
	       std::cout << " time: " << tempo << std::endl;
	     }
	     else{
	       h8->Fill(3564*(iEvent.orbitNumber()-orbrpc)+bx-prevbx);
	     }
	     //h2->Fill(fabs(bx-prevbx));
	   }
	   prevbx =bx;
	   preveven = iEvent.id().event();
           orbrpc = iEvent.orbitNumber();
	 }
	 
       }
     }

   }



}



// ------------ method called once each job just before starting event loop  ------------
void 
TBXanal::beginJob(const edm::EventSetup&)
{

  hfile = new TFile(root_file_name.c_str(),"RECREATE");
  //  h1 = new TH1F("OrbitTime","Orbit Time",7200,0,7200);
  h1 = new TH1F("OrbitTime","Orbit Time",nbinsbx,0,1);
  h2 = new TH1D("BunchXDif","Bx Difference",nbinsbx,0,1);
  h9 = new TH1D("BunchXDifzoom","Bx Difference",nbinsbx,0,nbinsbx);
  h7 = new TH1D("BunchXDifRPCPeak","Bx Difference inside peak",nbinsbx,0,1);
  h8 = new TH1D("BunchXDifRPCOutPeak","Bx Difference outside peak",nbinsbx,0,1);
  h10 = new TH1D("BunchXDifBxn5","Bx Difference bx -5",nbinsbx,0,1);
  h11 = new TH1D("BunchXDifBxn4","Bx Difference bx -4",nbinsbx,0,1);
  h12 = new TH1D("BunchXDifBxn3","Bx Difference bx -3",nbinsbx,0,1);
  h13 = new TH1D("BunchXDifBxn2","Bx Difference bx -2",nbinsbx,0,1);
  h14 = new TH1D("BunchXDifBxn1","Bx Difference bx -1",nbinsbx,0,1);
  h15 = new TH1D("BunchXDifBx0","Bx Difference bx 0",nbinsbx,0,1);
  h16 = new TH1D("BunchXDifBx1","Bx Difference bx 1",nbinsbx,0,1);
  h17 = new TH1D("BunchXDifBx2","Bx Difference bx 2",nbinsbx,0,1);
  h18 = new TH1D("BunchXDifBx3","Bx Difference bx 3",nbinsbx,0,1);
  h19 = new TH1D("BunchXDifBx4","Bx Difference bx 4",nbinsbx,0,1);
  h20 = new TH1D("BunchXDifBx5","Bx Difference bx 5",nbinsbx,0,1);
  h21 = new TH1D("PhiUnderPeak","Phi Under Peak",70,0,7);
  h22 = new TH1D("EtaUnderPeak","Eta Under Peak",50,-2,2);
  h23 = new TH2D("PhiEtaPeak","Phi vs Eta Under Peak",70,0,7,50,-2,2);
  //  h3 = new TH1F("OrbitTimedt","Orbit Time dt",7200,0,7200);
  h3 = new TH1F("OrbitTimedt","Orbit Time dt",nbinsbx,0,1);
  h4 = new TH1D("BunchXDifdt","Bx Difference dt",nbinsbx,0,1);
  //  h5 = new TH1F("OrbitTimecsc","Orbit Time csc",7200,0,7200);
  h5 = new TH1F("OrbitTimecsc","Orbit Time csc",nbinsbx,0,1);
  h6 = new TH1D("BunchXDifcsc","Bx Difference csc",nbinsbx,0,1);

  h1->SetBit(TH1::kCanRebin);
  h2->SetBit(TH1::kCanRebin);
  h3->SetBit(TH1::kCanRebin);
  h4->SetBit(TH1::kCanRebin);
  h5->SetBit(TH1::kCanRebin);
  h6->SetBit(TH1::kCanRebin);
  h7->SetBit(TH1::kCanRebin);
  h8->SetBit(TH1::kCanRebin);
  h11->SetBit(TH1::kCanRebin);
  h12->SetBit(TH1::kCanRebin);
  h13->SetBit(TH1::kCanRebin);
  h14->SetBit(TH1::kCanRebin);
  h15->SetBit(TH1::kCanRebin);
  h16->SetBit(TH1::kCanRebin);
  h17->SetBit(TH1::kCanRebin);
  h18->SetBit(TH1::kCanRebin);
  h19->SetBit(TH1::kCanRebin);
  h20->SetBit(TH1::kCanRebin);
  h10->SetBit(TH1::kCanRebin);

  prevbx=-1;
  prevbxdt =-1;
  prevbxcsc =-1;
}

// ------------ method called once each job just after ending the event loop  ------------
void 
TBXanal::endJob() {

  hfile->cd();
  h1->Write();
  h2->Write();
  h3->Write();
  h4->Write();
  h5->Write();
  h6->Write();
  h7->Write();
  h8->Write();
  h9->Write();
  h10->Write();
  h11->Write();
  h12->Write();
  h13->Write();
  h14->Write();
  h15->Write();
  h16->Write();
  h17->Write();
  h18->Write();
  h19->Write();
  h20->Write();
  h21->Write();
  h22->Write();
  h23->Write();
  hfile->Close();
}

//define this as a plug-in
DEFINE_FWK_MODULE(TBXanal);
